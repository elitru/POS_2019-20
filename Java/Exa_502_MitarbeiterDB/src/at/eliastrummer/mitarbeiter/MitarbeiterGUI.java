package at.eliastrummer.mitarbeiter;

import java.io.FileNotFoundException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class MitarbeiterGUI extends javax.swing.JFrame {

    private DatabaseHandler dbHandler;
    private EmployeeListModel employeeModel = new EmployeeListModel();
    private DefaultComboBoxModel departmentModel = new DefaultComboBoxModel();

    public MitarbeiterGUI() {
        initComponents();
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MitarbeiterGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        dbHandler = new DatabaseHandler("postgres", "admin");

        this.setLocationRelativeTo(null);
        this.ltEmployee.setModel(employeeModel);
        this.cbDepartment.setModel(departmentModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmDelete = new javax.swing.JPopupMenu();
        miDeleteEmployee = new javax.swing.JMenuItem();
        left = new javax.swing.JPanel();
        setup = new javax.swing.JPanel();
        btConnect = new javax.swing.JButton();
        btDisconnect = new javax.swing.JButton();
        btSetup = new javax.swing.JButton();
        btTestData = new javax.swing.JButton();
        addEmployee = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tfFirstname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        tfLastname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        tfBirthdate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        tfSalary = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        tfDepartment = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cbGender = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        btCreate = new javax.swing.JButton();
        right = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltEmployee = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        cbDepartment = new javax.swing.JComboBox<>();
        lbAvgMale = new javax.swing.JLabel();
        lbAvgFemale = new javax.swing.JLabel();

        miDeleteEmployee.setText("delete");
        miDeleteEmployee.setActionCommand("delete");
        miDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteEmployeeActionPerformed(evt);
            }
        });
        pmDelete.add(miDeleteEmployee);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        left.setBorder(javax.swing.BorderFactory.createTitledBorder("Workspace"));
        left.setLayout(new java.awt.GridLayout(2, 1));

        setup.setLayout(new java.awt.GridLayout(1, 3));

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnectActionPerformed(evt);
            }
        });
        setup.add(btConnect);

        btDisconnect.setText("Disconnect");
        btDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDisconnectActionPerformed(evt);
            }
        });
        setup.add(btDisconnect);

        btSetup.setText("Setup");
        btSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSetupActionPerformed(evt);
            }
        });
        setup.add(btSetup);

        btTestData.setText("Insert Test Data");
        btTestData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTestDataActionPerformed(evt);
            }
        });
        setup.add(btTestData);

        left.add(setup);

        addEmployee.setLayout(new java.awt.GridLayout(7, 1));

        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(tfFirstname, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Firstname:");
        jLabel2.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel2.add(jLabel2, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        tfLastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLastnameActionPerformed(evt);
            }
        });
        jPanel3.add(tfLastname, java.awt.BorderLayout.CENTER);

        jLabel3.setText("Lastname:");
        jLabel3.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel3.add(jLabel3, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        tfBirthdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBirthdateActionPerformed(evt);
            }
        });
        jPanel4.add(tfBirthdate, java.awt.BorderLayout.CENTER);

        jLabel4.setText("Birthdate(dd.mm.yyyy):");
        jLabel4.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel4.add(jLabel4, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        tfSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSalaryActionPerformed(evt);
            }
        });
        jPanel5.add(tfSalary, java.awt.BorderLayout.CENTER);

        jLabel5.setText("Salary");
        jLabel5.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel5.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel5.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel5.add(jLabel5, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        tfDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDepartmentActionPerformed(evt);
            }
        });
        jPanel6.add(tfDepartment, java.awt.BorderLayout.CENTER);

        jLabel6.setText("Department");
        jLabel6.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel6.add(jLabel6, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout());

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "male", "female" }));
        jPanel7.add(cbGender, java.awt.BorderLayout.CENTER);

        jLabel7.setText("Gender");
        jLabel7.setMaximumSize(new java.awt.Dimension(150, 20));
        jLabel7.setMinimumSize(new java.awt.Dimension(150, 20));
        jLabel7.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel7.add(jLabel7, java.awt.BorderLayout.LINE_START);

        addEmployee.add(jPanel7);

        btCreate.setText("CREATE");
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });
        addEmployee.add(btCreate);

        left.add(addEmployee);

        getContentPane().add(left);

        right.setBorder(javax.swing.BorderFactory.createTitledBorder("Employee List"));
        right.setLayout(new java.awt.BorderLayout());

        ltEmployee.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        ltEmployee.setComponentPopupMenu(pmDelete);
        ltEmployee.setDoubleBuffered(true);
        jScrollPane1.setViewportView(ltEmployee);

        right.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 3));

        cbDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDepartmentActionPerformed(evt);
            }
        });
        jPanel1.add(cbDepartment);
        jPanel1.add(lbAvgMale);
        jPanel1.add(lbAvgFemale);

        right.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(right);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfLastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLastnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfLastnameActionPerformed

    private void tfBirthdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBirthdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBirthdateActionPerformed

    private void tfSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSalaryActionPerformed

    private void tfDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDepartmentActionPerformed

    private void btConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnectActionPerformed
        if (dbHandler.isConnected()) {
            System.out.println("here");
            return;
        }

        final MitarbeiterGUI _this = this;

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dbHandler.connect("mitarbeiterdb");
                    employeeModel.clear();
                    employeeModel.addAll(dbHandler.getAllEmployees());
                    departmentModel.removeAllElements();
                    departmentModel.addElement("All");
                    _this.getAllDepartments(dbHandler.employees).forEach(departmentModel::addElement);

                    JOptionPane.showMessageDialog(_this, "Successfully connected to database!");
                } catch (SQLException ex) {
                    try {
                        dbHandler.connect();
                        JOptionPane.showMessageDialog(_this, "Successfully connected to database!");
                    } catch (SQLException ex1) {
                        JOptionPane.showMessageDialog(_this, "Could not connect to database!");
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_btConnectActionPerformed

    private void btDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDisconnectActionPerformed
        if (!dbHandler.isConnected()) {
            return;
        }

        final MitarbeiterGUI _this = this;

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dbHandler.disconnect();
                    employeeModel.clear();
                    departmentModel.removeAllElements();
                    JOptionPane.showMessageDialog(_this, "Successfully disconnected from database!");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(_this, "Could not disconnect to database!");
                }
            }
        }).start();
    }//GEN-LAST:event_btDisconnectActionPerformed

    public List<Employee> getEmployeesFromDepartment(int dep, List<Employee> param) {
        List<Employee> result = new ArrayList<>();
        result.addAll(param);
        result.removeIf(e -> e.getDepartmentNumber() != dep);
        return result;
    }

    public double getAverageSalary(String gender, List<Employee> employees) {
        List<Double> sal = employees.stream()
                .filter(e -> e.getGender().equalsIgnoreCase(gender))
                .map(e -> e.getSalary().doubleValue())
                .collect(Collectors.toList());

        double sum = 0;

        for (double d : sal) {
            sum += d;
        }

        return sal.size() == 0 ? 0 : sum / sal.size();
    }

    public List<String> getAllDepartments(List<Employee> param) {
        return param
                .stream()
                .map(e -> e.getDepartmentNumber() + "")
                .distinct()
                .collect(Collectors.toList());
    }

    private void btSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSetupActionPerformed
        final MitarbeiterGUI _this = this;

        if (!dbHandler.isConnected()) {
            JOptionPane.showMessageDialog(_this, "You are currently not connected to the database!");
            return;
        }

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dbHandler.connect();
                    dbHandler.deleteDatabase();
                    dbHandler.createDB();
                    dbHandler.connect("mitarbeiterdb");
                    dbHandler.createTable();
                    JOptionPane.showMessageDialog(_this, "Setup is completed!");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(_this, "An error occured during setup! There's probably still another open connection!");
                }
            }
        }).start();
    }//GEN-LAST:event_btSetupActionPerformed

    private void btTestDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTestDataActionPerformed
        if (!dbHandler.isConnected()) {
            JOptionPane.showMessageDialog(this, "You are currently not connected to the database!");
            return;
        }

        final MitarbeiterGUI _this = this;

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    FileHandler.loadTestData().forEach(e -> {
                        if (dbHandler.insertEmployee(e) == null) {
                            JOptionPane.showMessageDialog(_this, "An error occured during inserting test data!");
                        } else {
                            System.out.println(e);
                            DatabaseHandler.employees.add(e);
                        }
                    });
                    JOptionPane.showMessageDialog(_this, "Test data was inserted successfully!");
                    employeeModel.clear();
                    employeeModel.addAll(dbHandler.getAllEmployees());
                    departmentModel.removeAllElements();
                    departmentModel.addElement("All");
                    _this.getAllDepartments(dbHandler.employees).forEach(departmentModel::addElement);

                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(_this, "An error occured during inserting test data!");
                }
            }
        }).start();
    }//GEN-LAST:event_btTestDataActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (dbHandler.isConnected()) {
            try {
                dbHandler.disconnect();
            } catch (SQLException ex) {
                Logger.getLogger(MitarbeiterGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void miDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteEmployeeActionPerformed
        if (ltEmployee.getSelectedValuesList() != null && ltEmployee.getSelectedValuesList().size() > 0) {
            final MitarbeiterGUI _this = this;

            new Thread(new Runnable() {
                @Override
                public void run() {
                    boolean isDeletingSuccess = true;

                    for (Employee e : ltEmployee.getSelectedValuesList()) {
                        if (!dbHandler.removeEmployee(e)) {
                            isDeletingSuccess = false;
                        } else {
                            employeeModel.remove(e.getPersNumber());
                        }
                    }

                    if (!isDeletingSuccess) {
                        JOptionPane.showMessageDialog(_this, "An error occured during deleting data!");
                        reloadList();
                        return;
                    }

                    JOptionPane.showMessageDialog(_this, "Data was successfully deleted!");
                }
            }).start();
        }
    }//GEN-LAST:event_miDeleteEmployeeActionPerformed

    private void reloadList() {
        dbHandler.getAllEmployees();
        employeeModel.clear();
        employeeModel.addAll(dbHandler.getAllEmployees());
        departmentModel.removeAllElements();
        departmentModel.addElement("All");
    }

    private void cbDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDepartmentActionPerformed
        String dep = (String) cbDepartment.getSelectedItem();

        if (dep == null) {
            return;
        }

        if (dep.equalsIgnoreCase("all")) {
            employeeModel.clear();
            employeeModel.addAll(DatabaseHandler.employees);
            lbAvgMale.setText("Average (Men): " + String.format("%.2f", getAverageSalary("m", DatabaseHandler.employees)));
            lbAvgFemale.setText("Average (Women): " + String.format("%.2f", getAverageSalary("w", DatabaseHandler.employees)));
        } else {
            try {
                List<Employee> filtered = getEmployeesFromDepartment(Integer.parseInt(dep), DatabaseHandler.employees);
                employeeModel.clear();
                employeeModel.addAll(filtered);
                lbAvgMale.setText("Average (Men): " + String.format("%.2f", getAverageSalary("m", getEmployeesFromDepartment(Integer.parseInt(dep), DatabaseHandler.employees))));
                lbAvgFemale.setText("Average (Women): " + String.format("%.2f", getAverageSalary("w", getEmployeesFromDepartment(Integer.parseInt(dep), DatabaseHandler.employees))));
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_cbDepartmentActionPerformed

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        final String firstname = tfFirstname.getText();
        final String lastname = tfLastname.getText();
        final String birthdate = tfBirthdate.getText();
        final String salary = tfSalary.getText();
        final String gender = (String) cbGender.getSelectedItem();
        final String department = tfDepartment.getText();

        if (firstname.equals("") || lastname.equals("") || birthdate.equals("") || salary.equals("") || department.equals("")) {
            JOptionPane.showMessageDialog(this, "Some field(s) are missing!");
            return;
        }

        try {
            final double sal = Double.parseDouble(salary.replace(",", "."));
            final LocalDate bd = LocalDate.parse(birthdate, DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            final int dep = Integer.parseInt(department);

            final MitarbeiterGUI _this = this;

            new Thread(new Runnable() {
                @Override
                public void run() {
                    Employee template = new Employee(-1, lastname, lastname, bd, BigDecimal.valueOf(sal), dep, gender.equalsIgnoreCase("male") ? "M" : "W");
                    if (dbHandler.getAllEmployees().contains(template)) {
                        JOptionPane.showMessageDialog(_this, "Some field(s) are missing!");
                        return;
                    }

                    Employee employee = dbHandler.insertEmployee(template);

                    if (employee == null) {
                        JOptionPane.showMessageDialog(_this, "An error occured during insertion!");
                        return;
                    }

                    DatabaseHandler.employees.add(employee);
                    reloadList();
                    JOptionPane.showMessageDialog(_this, "Employee was successfully inserted into the database!");
                }
            }).start();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid format!");
        }
    }//GEN-LAST:event_btCreateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MitarbeiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MitarbeiterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addEmployee;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btDisconnect;
    private javax.swing.JButton btSetup;
    private javax.swing.JButton btTestData;
    private javax.swing.JComboBox<String> cbDepartment;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAvgFemale;
    private javax.swing.JLabel lbAvgMale;
    private javax.swing.JPanel left;
    private javax.swing.JList<Employee> ltEmployee;
    private javax.swing.JMenuItem miDeleteEmployee;
    private javax.swing.JPopupMenu pmDelete;
    private javax.swing.JPanel right;
    private javax.swing.JPanel setup;
    private javax.swing.JTextField tfBirthdate;
    private javax.swing.JTextField tfDepartment;
    private javax.swing.JTextField tfFirstname;
    private javax.swing.JTextField tfLastname;
    private javax.swing.JTextField tfSalary;
    // End of variables declaration//GEN-END:variables
}
